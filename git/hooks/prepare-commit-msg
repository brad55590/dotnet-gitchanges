#!C:/Program\ Files/Git/usr/bin/sh.exe

BRANCH=$(git symbolic-ref HEAD | awk -F'/' '{print $3}')
staged_files=$(git diff --name-only --cached)
branch_regex="([A-Z]{2,9}-[0-9]+).*"
reference_regex="reference:.*"
version_regex="version:.*"

# Populate reference from branch name
if [ -n "$BRANCH" ]; then
    if [[ $BRANCH =~ $branch_regex ]]; then
        reference="${BASH_REMATCH[1]}"
    fi
fi

# Read the first line from the commit message file
read -r first_line<$1

# If the first line of the commit message file doesn't already have a reference, add the reference from the branch name
if [[ ! $first_line =~ $branch_regex ]]; then
  sed -i "1s;^;$reference;" $1
fi

# Look for a reference section of the commit message and put the reference there if it exists
sed -i "s/$reference_regex/reference: $reference/" $1

# Version defaults to Unreleased
version="Unreleased"

# Look to see if the version file has been changed and grab the version if it has.
if [[ $staged_files == *"version.txt"* ]]; then
  # Read the version file which we expect to be in directory the command is being run from
  read -r version<"version.txt"
fi

# Look for a version section of the commit message and put the version there
sed -i "s/$version_regex/version: $version/" $1
